	Лекция 6 (Snapshot атомарных регистров)
Все структуры считаем иммутабельными. Изменение = копирование + 
изменение + подмена указателя (посредством CAS операций)

	1) Lock-free алгоритм
		иммутабельная струкутра
--------       ---------
| ptr  |------>| value |
--------       |-------|
	       |version| <-- изменяется писателем
	       ---------

Считываем по 2 раза подряд до тех пор, пока версии не будут отличаться.
Сравнимаем вектора версий для каждого регистра отдельно. Т.е. версии
первого регистра с первым регистром, второго со вторым и т.д.

Snapshot олицетворяет состояние системы. И нам важно штобы мы получили
действительно существовавшее значение в системе, чтобы принять верное
решение

vector указателей на структуры
---------
| ptr0  | --> struct 0
---------
| ptr1  | --> struct 1
---------
| ptr2  | --> struct 2
---------
| ptr3  | --> struct 3
---------

Подменяем указатели в векторе, благодаря CAS-опрерациям (т.е. атомарно)

	2) Wait-free алгоритм
В lock-free алгоритме, потоку, который делает снимки может очень
часто невезти

ОГРАНИЧЕНИЕ:
SWMRR (single writer, multiple readers register), т.е. в каждый поток
может писать не более чем один прибитый к регистру поток

Платим памятью и средней производительностью в угоду гарантий
Используются в ответственных системах реального премени

